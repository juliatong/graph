1. Knapsack idea originates from the choice to take or not take
2. If it's how many ways to form(count),maximum or minimum on knapsack, then it can improved using dp tables;
if it's collecting all the possibilities, then backtracking can be used to reduce take/not take 2 recursive calls into 1

3. In count problem, there will be bounded and unbounded difference
   Bounded 0/1--> Partition array into 2 subsets
   Unbounded 0/âˆž--> coin change problem, with unlimited supply of coins

4. j>=nums[i-1]? dp[i-1][j-nums[i-1]] : false
5. Bounded. Ele can be used once. dp[i][j]=(1+dp[i-1][j-nums[i-1]]) + dp[i-1][j];
   Unbounded. dp[i][j]= (1+dp[i][j-coins[i-1]]) + dp[i-1][j];

6. Min/Max. table initi values will be different from count.
   Min/Max will be init to Integer.MIN_VALUE/Integer.MAX_VALUE, count problem will be inti to 0.
   Math.min(dp[i-1][j], 1+dp[i][j-arr[i-1]]/1+dp[i-1][j-arr[i-1]]);


7. >Typical knapsack asking for max value can be used with 1d dp array instead of 2d array, as duplicate doesn't matter
   > for loop target amount(for loop coins), instead of for loop coins(for loop amount)
   > Use decrement instead of increment for overflow problem.

8. Some recursive knapsack problem can be written in backtrack.
   Recursive knapsack has2 recursive calls, while backtrack has only 1 for loop.

9. Subset sum problem:
    >use the S2, the bigger set ,int 2S2 = (sum + target);  to avoid negative (sum-target) for array length
    >Cant't initialise dp[0][i]=1 at fist place, as there will be>1 way to get sum 0
    ***see target sum at knapsack problem
