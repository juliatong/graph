1. TreeMap: can't use Map to return
TreeMap<Integer, List<Integer>> map2=new TreeMap<>();

2. Whenever map needs to be sorted, use treeMap. Don't try to sort hashmap!!!

3. Queue<Map.Entry<Integer, Integer>> heap = new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());
Queue<Map.Entry<Integer, Integer>> NOT PriorityQueue for generic reference.

4.          if(!treeMap.containsKey(fre)){
                List<Integer> tmp=new ArrayList<>();
                treeMap.put(fre,tmp);
            }
            treeMap.get(fre).add(num);

5. Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate call to heappop().
       min.offer(num);
       max.offer(min.poll());
       if(min.size() < max.size()){
         min.offer(max.poll());
       }

6. heap push/pop is O(1)(root), remove is O(N); treeSet, add/remove are roughly O(logN)
7.         Comparator<Integer> comparator = new Comparator<>(){
                public int compare(Integer a, Integer b) {
                   if (nums[a] != nums[b]) {
                       return Integer.compare(nums[a], nums[b]);
                   }
                   else {
                       return a - b;
                   }
               }
           };