1> Do the result of combination unique?
Below are consider 1 or 3 results?
(1, 1, 2)
(1, 2, 1)
(2, 1, 1)
 If considered 1(UNIQUE)-->NO index in parameters. It will be a simple recursive/dp.
 Else, (int start) must be passed in. It will be more a backtracking.

2> With back track, are numbers used only once or unlimited times?
  If once, pass in (i+1); if unlimited, (i)

3> Are numbers in array distinct?
   If not distinct, if(i>index && nums[i]==nums[i-1]) continue;
   else, no need to add this.

4> Details on implementation:
  1. Back track, sort. Arrays.sort(nums);
  2. result.add(new ArrayList<>(path));
  3. Return; in base must be there
  4. for(int i=start){}
  3. int remain=target-nums[i];
  4. backtrack(i); backtrack(i+1);
  5. path.remove(path.get(path.size()-1));// remove the last added ele

shopping decision:
[jeans($1), shoes($1),tops($2), accessories($2)]
1. {jeans, shoes, tops} == {shoes, tops, jeans} same--> UNIQUE(backtrack). (1, 1, 2)== (1, 2, 1)
2. can only choose one or multiple for each category-->i/i+1
3. Distinct price? Although not distinct, as jeans may have the same price for shoes.
   say, [shoes($2), jeans(3)]!=[jeans($2), tops(3)].They are different choices, hence can't use skip logic.
   [shoes($1), jeans(1), top($2)]!=[shoes($1), jeans(1), accessory($2)]


* Unique vs !Unique regards to DP
Unique--> 2D array(Knapsack)
!Unique: 1d array